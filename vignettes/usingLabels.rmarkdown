---
title: "Testing reportRmd Labels"
format: 
  docx:
    fig-height: 2
    number-sections: false
    reference-doc: '../../../wordTemplate.docx'
editor: visual
---


Install the new version - this is on a separate branch, so that if you want to revert you the development or CRAN versions you can simply delete the reportRmd package folder and re-install.


```{r, echo=F,include=FALSE}
library(tidyverse)

```

```{r}
# if you don't have devtools installed:
#install("devtools")

# otherwise the variable label version is here:
devtools::install_github("biostatsPMH/reportRmd", ref="varLabs")

# For the most recent stable version
# devtools::install_github("biostatsPMH/reportRmd", ref="development")
library(reportRmd)
```


# Basic Idea

I've tried not to alter the basic workings of the package.

The labelling system works by:

1.  creating a data frame that contains variable/label pairs
2.  specifying that this is a variable label data frame using the `setVariableLabels` function
3.  running the rm_covsum, rm_uvsum or rm_mvsum as usual

- OR -

If you use a data frame with labelled variables (from `expss`, `haven` or `sjlabelled`) it should just work automatically.

Imagine these are the three data sets your report uses:


```{r, echo=F}
library(DiagrammeR)
tmp <- grViz("digraph{
  graph[rankdir = TB,overlap=TRUE,width=1]
  
  node[fontcolor=black,margin=.15,style='',shape='box',fontname=arial,fontsize=12,penwidth=1.5,color=steelblue]  
  A[label='childData1
  Variables:
  id 
  age
  sx
  yob
  trt
  ']
  B[label='childData2
  Variables:
  id 
  dt
  gmfm
']
  C[label='parentData
  Variables:
  p_id
  p_sx
  p_inc
  p_lv']
  
}")
#tmp
tmp = DiagrammeRsvg::export_svg(tmp)
tmp = charToRaw(tmp)
rsvg::rsvg_png(tmp, 'i1.png')


```


![](i1.png)

![](i1.pmg)

You can create a default table of variable/label pairs for the child data, and a separate table specific to the parent data.

We'll create two: one for the child data, which will be the default and one for the parent data. Each data frame has two columns, one for variable names, the other for labels. The columns names can be whatever you want, here they are simply var1 and var2.


```{r, echo=F}
library(DiagrammeR)
tmp <- grViz("digraph{
  graph[rankdir = TB,overlap=TRUE,width=1]
  
  node[fontcolor=black,margin=.15,style='',shape='box',fontname=arial,fontsize=12,penwidth=1.5,color=steelblue]  

  E [ label = <
    <table border='1'>
       <tr><td colspan='2' >childData_labels</td></tr>
       <tr><td >var1</td><td >var2</td></tr>
       <tr><td >age</td><td >Age at baseline</td></tr>
       <tr><td >sx</td><td>Child Sex</td></tr>
       <tr><td >yob</td><td >Year of Birth</td></tr>
       <tr><td >trt</td><td >Treatment Group</td></tr>
       <tr><td >dt</td><td >Assessment Date</td></tr>
       <tr><td >gmfm</td><td >Gross Motor Function Score</td></tr>
    </table>
  > ]

  F [ label = <
    <table border='1'>
       <tr><td colspan='2' >parentData_labels</td></tr>
       <tr><td >var1</td><td >var2</td></tr>
       <tr><td >psx</td><td >Parent Sex</td></tr>
       <tr><td >pinc</td><td >Parent Income</td></tr>
       <tr><td >plv</td><td >Parent Living Arrangment</td></tr>
    </table>
  > ]
  
}")
#tmp
tmp = DiagrammeRsvg::export_svg(tmp)
tmp = charToRaw(tmp)
rsvg::rsvg_png(tmp, 'i2.png')


```


![](i2.png)

![](i2.pmg)

Now we use the `setVariableLabels` command to tell `reportRmd` to use the `parentData_labels` data frame as labels for the `parentData` data and the `childData_labels` data frame as the default variable labels, for all other data frames.


```{r,eval=F}
setVariablLabels(childData_labels,parentData=parentData_labels)
```


Once we've set the label tables, `reportRmd` will use the variable labels in `rm_covsum,``rm_uvsum` and `rm_mvsum` unless the argument `nicenames` is set to `FALSE`.


```{r,include=F}
childData_labels <- tribble(~var1,~var2,
       'age','Age at baseline',
       'sx','Child Sex',
       'yob','Year of Birth',
       'trt','Treatment Group',
       'dt','Assessment Date',
       'gmfm','Gross Motor Function Score')

N<-100
childData1 <- data.frame(
  age=rnorm(N,mean=6,sd=1.2),
  sx=factor(rbinom(N,1,.3),labels = c('Male','Female')),
  yob=factor(rpois(N,lambda=1)+2008),
  trt=factor(rbinom(N,1,.5),labels = c('control','intervention'))
)
clearVariableLabels()
setVariableLabels(childData_labels)
```

```{r}
rm_covsum(data=childData1,
          maincov = 'trt',
          covs = c('age','sx','yob'))
```


\newpage

# Worked Example 

Get some descriptive stats for the ctDNA data that comes with the package. The `nicenames` argument is TRUE by default so underscores are replaced by spaces


```{r}
data(ctDNA)
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'))

```


otherwise, we can keep the exact variable names


```{r}
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'),
          nicenames = F)

```


We can define a table with variable labels


```{r}
ctDNA_names <- data.frame(var=names(ctDNA),
                          label=c('Patient ID',
                                  'Study Cohort',
                                  'Change in ctDNA since baseline',
                                  'Number of weeks on treatment',
                                  'Percentage change in tumour measurement'))

```


Then we set the variable labels that correspond to the ctDNA data like this (no quotes!):


```{r}
setVariableLabels(ctDNA=ctDNA_names)
```


That gave a message that we haven't set a table of default variable names, just a table of names specific to the ctDNA data

We can look to see which data frames have variable labels and if there is a default set


```{r}
getVariableLabels()
```


Now if we re-run our stats, the variable names are replaced by the labels


```{r}
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'),
          nicenames = T)

```


..unless we want to keep the variable names, and they we just use `nicenames=F`:


```{r}
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'),
          nicenames = F)

```


It will also work with data subsets (both tidyselect and the subset function)


```{r}
rm_covsum(data=subset( ctDNA%>%filter(cohort!='A'),size_change>0),
          covs=c('cohort','ctdna_status','size_change'))


rm_covsum(data=ctDNA %>%
            filter(cohort!='A') ,
          maincov='cohort',
          covs=c('ctdna_status','size_change'))

```


We can define variable labels for the pembrolizumab data and add these as the default variable labels to use for all data frames without a specific table


```{r}
varNames <- data.frame(var=names(pembrolizumab),
                       label=c('Patient ID','Age at study entry','Patient Sex','Study Cohort','Target lesion size at baseline','PD L1 percent','log of tumour size','Baseline ctDNA','Did ctDNA increase or decrease from baseline to cycle 3','Objective Response','Clinical Beneficial Response','Overall survival status', 'Overall survival time in months','Progression free survival status','Progression free survival time in months'))

setVariableLabels(varNames) # equivalent to  setVariableLabels(default=varNames)

```


Now when we check we can see that there is a default variable table as well


```{r}
getVariableLabels()

```


If we subset the pembrolizumab data and run some stats they are output with variable labels - because we have set default labels, we don't need to set separate labels for the `cohort_A` data.


```{r}
cohort_A <- pembrolizumab %>%
  filter(cohort=="A")

rm_uvsum(data=cohort_A, response='orr',
covs=c('age','pdl1','change_ctdna_group'))

```


You don't need to specify labels for all variables. Variables without labels will just be displayed as usual (using `nicenames`).

If we change the labels:


```{r}
varNames <- data.frame(var=c('l_size','pdl1','tmb'),
                       label=c('Target lesion size at baseline','PD L1 percent','log of tumour size'))

setVariableLabels(varNames) # equivalent to  setVariableLabels(default=varNames)

```


And get some new stats we see labels if we set them and nice variable names otherwise


```{r}

rm_covsum(data=cohort_A, 
          covs=c('change_ctdna_group','pdl1','l_size','tmb'))

```


# Working With Labelled Data

If variable labels are detected (currently works for `haven`, `expss` and `sjlabelled` packages), then they will automatically be used.

The expss package can be used to add labels:


```{r}
library(expss)
ctDNA <- apply_labels(ctDNA,
                      cohort="The sample cohort",
                      ctdna_status = "Change in ctDNA since baseline",
                      size_change = "Percentage change in tumour measurement")
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'))

```


or to change labels


```{r}
ctDNA <- apply_labels(ctDNA,
                      cohort="A different cohort label")
rm_covsum(data=ctDNA,
          covs=c('cohort','ctdna_status','size_change'))

```


\newpage

If you want to inspect the variable labels associated with a labelled data set use `extractLabels`


```{r}
extractLabels(ctDNA)
```


If you want to check which variable label tables are associated with data frames use  `getVariableLabels`


```{r}
getVariableLabels()
```


To clear all variable labels:


```{r}
clearVariableLabels()
```

