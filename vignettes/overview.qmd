---
title: "reportRmd Package"
format: revealjs
editor: visual
---

## Website

reportRmd is on CRAN. However, there have been feature improvements and bug fixes since the last submission.

See our github site to download the development package <https://github.com/biostatsPMH/reportRmd#readme/>.

```{r setup}
knitr::opts_chunk$set(echo = TRUE,warning = FALSE,message = FALSE,comment = '',dpi=300)

# # You made need this to get special characters to work for PDF reports
# knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE,comment = '',dpi=300,dev="cairo_pdf")
library(tidyverse)
library(reportRmd)

# Custom ggplot adjustments can be made here
theme_pmh <- function(base_size=10){
  theme_bw(base_size=base_size)  %+replace% 
    theme(legend.position = 'bottom')
}
theme_set(theme_pmh(base_size=10))

# Set the ggplot palette
options(list(ggplot2.discrete.fill = function() reportRmd:::scale_colour_reportRx(),
             ggplot2.discrete.colour = function() reportRmd:::scale_colour_reportRx()))
```

## Purpose

The purpose of `reportRmd` is to facilitate *fast* and *tidy* reporting.

reportRmd does not:

-   verify the suitability of the analysis!
-   perform any model checks
-   perform any distributional checks

**Garbage In = Garbage Out!**

## Quick Background

reportRmd began life as reportRx and used R+ sweave + ghostscript to produce reports

I couldn't make it work to save my life, and I liked RMarkdown, so adapted the functions

That's why all the functions have `rm_` prefixes - I needed to differentiate them from the original `p` prefixes.

reportRx was pulled off CRAN because of a lack of development.

We are trying to do better with reportRmd - you are welcome to join us!!

## rm_covsum

This is for Table 1 reporting

```{r}

rm_covsum(data=pembrolizumab, maincov = 'sex',
covs=c('age','pdl1'),
show.tests=TRUE,fontsize = 16)
```

**There is a lot of flexibility - and it is not necessary to specify a main covariate**

## rm_uvsum

Summary of multiple **univariate** regressions

```{r}
rm_uvsum(response = c('os_time','os_status'),
covs=c('baseline_ctdna','change_ctdna_group'),
data=pembrolizumab,CIwidth=.9)
```

The function will guess the type of regression to be performed based on the response

## rm_uvsum cont'd

Currently supported formats:

-   lm, glm
-   polr
-   gee
-   coxph, crr
-   **negbin** is planned

## rm_uvsum cont'd

To check what's going on use `returnModels=TRUE`

```{r}

# Poisson models returned as model list
mList <- rm_uvsum(response = 'baseline_ctdna',
covs=c('age','sex','l_size','pdl1','tmb'),
data=pembrolizumab, returnModels=TRUE)

mList[[1]]
```

## rm_uvsum cont'd

To return a data frame (instead of a pandoc output) use `tableOnly=TRUE`

```{r}
rm_uvsum(response = c('os_time','os_status'),
covs=c('baseline_ctdna','age','pdl1','tmb'),
data=pembrolizumab,CIwidth=.95,tableOnly = T)

```

## rm_mvsum

Reporting of multivariable regression models. Accepts a fitted model.

```{r}
glm_fit = glm(change_ctdna_group~sex+age,
data=pembrolizumab,family = 'binomial')
rm_mvsum(glm_fit)
```

**You can hide the N/Event/VIF columns**

## rm_mvsum cont'd

Currently supports all of the rm_uvsum types + negbin from `MASS`

Main customisations:

-   p-value adjustments (`p.adjust`)
-   decimal places
-   raw p-values
-   extra columns

## rm_mvsum cont'd

Can also just return a data.frame - but you may prefer `broom::tidy`

```{r}
lm_fit = lm(tmb~sex+age,data=pembrolizumab)
rm_mvsum(lm_fit,vif = F,tableOnly = T,showN = F)

```

```{r}
broom::tidy(lm_fit)
```

## Survival Tables

```{r}
rm_survsum(data=pembrolizumab,time='os_time',status='os_status',
group="sex",survtimes=seq(12,36,12),
survtimesLbls=seq(1,3,1),
survtimeunit='years',fontsize = 20)
```

## Combining UV + MV

You can combine univariate and multivariable tables

```{r}
uvtab<-rm_uvsum(response = 'baseline_ctdna',
covs=c('age','pdl1','tmb'),
data=pembrolizumab,tableOnly=TRUE)
lm_fit=lm(baseline_ctdna~age+tmb,data=pembrolizumab)
mvtab<-rm_mvsum(lm_fit,tableOnly = TRUE)
rm_uv_mv(uvtab,mvtab)
```

## Combining Tables

```{r}
fit1=lm(baseline_ctdna~age+tmb,data=pembrolizumab)
tab1<-rm_mvsum(fit1,tableOnly = TRUE) %>% mutate(model='Model 1')
fit2=lm(baseline_ctdna~age+pdl1+tmb,data=pembrolizumab)
tab2<-rm_mvsum(fit2,tableOnly = TRUE) %>% mutate(model='Model 2')

nestTable(bind_rows(tab1,tab2),head_col = 'model',to_col = 'Covariate')

```

## Output tables for word/pdf

```{r}
data <- data.frame(Letters=letters[1:3],Numbers=1:3) 
outTable(data)
```

## Univariate Model Forest Plots

**forestplot2 is deprecated**

```{r}
forestplotUV(response="orr", covs=c("change_ctdna_group", "sex", "age", "l_size"),
data=pembrolizumab, family='binomial',logScale = T) 
```

## Multivariable Model Forest Plots

```{r}
forestplotMV(glm(orr~change_ctdna_group+sex+age+l_size,
data=pembrolizumab,family = 'binomial'),logScale = T)
```

## Combined Forest Plots

```{r}
UVp = forestplotUV(response="orr", covs=c("change_ctdna_group", "sex", "age",
"l_size"), data=pembrolizumab, family='binomial')
MVp = forestplotMV(glm(orr~change_ctdna_group+sex+age+l_size,
data=pembrolizumab,family = 'binomial'))
forestplotUVMV(UVp, MVp,logScale = T)

```

## Survival Curves

**There are numerous customisations available!**

```{r}
ggkmcif(response = c('os_time','os_status'),
cov='sex',
data=pembrolizumab,
median.text = TRUE,median.lines=TRUE,conf.curves=TRUE)
```

## Miscellaneaous

Get excel column numbers

```{r}
excelCol(a-d,p,x)
```

Or names from numbers

```{r}
reportRmd::excelColLetters(37)
```

Colour palette

```{r}
# Set the ggplot palette
options(list(ggplot2.discrete.fill = function() reportRmd:::scale_colour_reportRx(),
             ggplot2.discrete.colour = function() reportRmd:::scale_colour_reportRx()))

```
